<!DOCTYPE html>
<html>
   <head>
      <title>Capture Process Work Flow</title>
      <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/2.1.13/go-debug.js"></script> -->
      
  <link rel="stylesheet" href="../css/jquery-ui.min.css" />
  <script src="../js/jquery.min.js"></script>
  <script src="../js/jquery-ui.min.js"></script>
  <link rel="stylesheet" href="../css/bootstrap.min.css">
 
  <script src="../js/bootstrap.min.js"></script>


  <script src="../js/go.js"></script>
  <script src="../js/Figures.js"></script>

  <link rel='stylesheet' href='../css/DataInspector.css' />
  <script src="../js/DataInspector.js"></script>
  <script src="../js/calculations.js"></script>

    
  <style type="text/css">
    .draggable {
      display: inline-block;
      vertical-align: top;
      border: 4px solid #BBB;
      border-radius: 4px;
      background-color: #F5F5F5;
      position: absolute;
      top: 20px;
      left: 20px;
      z-index: 500;
    }

    .handle {
      background-color: lightblue;
      cursor: move;
      text-align: center;
      font: bold 12px sans-serif;
    }

    #infoDraggable {
      font: 12px helvetica, sans-serif;
      min-width: 213px;
    }

    #myInfo {
      width: 100%;
      overflow: hidden;
    }
    #colouring{
        color: rgb(153, 51, 102);
        align-content: center;
        background-color: rgb(241, 229, 229);
    }

   
    
</style>
      
   </head>	
<body>  
  <div class="header" id="colouring">
        <div class="container text-center" >
        <h1 id="pc" align="center"><b>Capture Process Flow</b></h1>
        
        
        </div>
      </div> 
      <div class="text-right">
          
          
                
             <button type="button" onclick="goBack()" class="btn btn-success">Back</button>  
        
          </div>
    <div id="sample">
        <div style="width: 100%; display: flex; justify-content: space-between">
          <div id="myPaletteDiv" style="width: 105px; margin-right: 2px; background-color: whitesmoke; border: solid 1px black"></div>
          <div id="myDiagramDiv" style="flex-grow: 1; height: 620px; border: solid 1px black"></div>
        </div>
        <br>
        
    <div id="infoDraggable" class="draggable" style="display: inline-block; vertical-align: top; padding: 5px; top: 130px; left: 380px;">
      <div id="infoDraggableHandle" class="handle">Info</div>
      <div>
      <div id="myInfo"></div>
      </div>
    </div>
        <div>
          <div align="center">
            <button id="SaveButton" class="btn btn-success" onclick="save()">Save Process Flow</button>
            {{!-- <button onclick="load()">Load</button> --}}
            
          </div>
          <br>
          {{!-- <input hidden id="aa" value="{{list}}">
          <textarea id="mySavedModel" hidden >{ "class": "go.GraphLinksModel",
        "linkFromPortIdProperty": "fromPort",
        "linkToPortIdProperty": "toPort",
        "nodeDataArray": [
       ],
        "linkDataArray": [
       ]}
          </textarea> --}}
          
          
        </div>
      </div>
      <form action="/user/saveDiagram" method="POST">
        <input id="data" name="data" type="text" hidden/>
        <div align="center">
          <label  for="Proc_Idura"><font size="3"><b>Process ID:</font></label>
<input type="text-center" name="Proc_Id" maxlength="30"   name="Proc_Idura" required>
        {{!-- <input name="Proc_Id" type="text" placeholder="Process_ID" required/> --}}
        
        <button class="btn btn-success" type="submit">Save</button>
        {{!-- <button type="submit" formaction="/load-diagram">Load</button> --}}
        </div>
      </form>
      <!-- <form action="/load-diagram" method="POST">
        <button type="submit">Load</button>
      </form> -->
<script>
    var $ = go.GraphObject.make;  // for conciseness in defining templates
    //var aa = document.getElementById("aa").value;
    //console.log("hello"+aa);
    
      myDiagram =
        $(go.Diagram, "myDiagramDiv",  // must name or refer to the DIV HTML element
          {
            grid: $(go.Panel, "Grid",
              $(go.Shape, "LineH", { stroke: "lightgray", strokeWidth: 0.5 }),
              $(go.Shape, "LineH", { stroke: "gray", strokeWidth: 0.5, interval: 10 }),
              $(go.Shape, "LineV", { stroke: "lightgray", strokeWidth: 0.5 }),
              $(go.Shape, "LineV", { stroke: "gray", strokeWidth: 0.5, interval: 10 })
            ),
            "draggingTool.dragsLink": true,
            "draggingTool.isGridSnapEnabled": true,
            "linkingTool.isUnconnectedLinkValid": true,
            "linkingTool.portGravity": 20,
            "relinkingTool.isUnconnectedLinkValid": true,
            "relinkingTool.portGravity": 20,
            "relinkingTool.fromHandleArchetype":
              $(go.Shape, "Diamond", { segmentIndex: 0, cursor: "pointer", desiredSize: new go.Size(8, 8), fill: "tomato", stroke: "darkred" }),
            "relinkingTool.toHandleArchetype":
              $(go.Shape, "Diamond", { segmentIndex: -1, cursor: "pointer", desiredSize: new go.Size(8, 8), fill: "darkred", stroke: "tomato" }),
            "linkReshapingTool.handleArchetype":
              $(go.Shape, "Diamond", { desiredSize: new go.Size(7, 7), fill: "lightblue", stroke: "deepskyblue" }),
            "rotatingTool.handleAngle": 270,
            "rotatingTool.handleDistance": 30,
            "rotatingTool.snapAngleMultiple": 15,
            "rotatingTool.snapAngleEpsilon": 15,
            "undoManager.isEnabled": true
          });

      // when the document is modified, add a "*" to the title and enable the "Save" button
      myDiagram.addDiagramListener("Modified", function(e) {
        var button = document.getElementById("SaveButton");
        if (button) button.disabled = !myDiagram.isModified;
        var idx = document.title.indexOf("*");
        if (myDiagram.isModified) {
          if (idx < 0) document.title += "*";
        } else {
          if (idx >= 0) document.title = document.title.substr(0, idx);
        }
      });

      // Define a function for creating a "port" that is normally transparent.
      // The "name" is used as the GraphObject.portId, the "spot" is used to control how links connect
      // and where the port is positioned on the node, and the boolean "output" and "input" arguments
      // control whether the user can draw links from or to the port.
      function makePort(name, spot, output, input) {
        // the port is basically just a small transparent square showed on diff shapes
        return $(go.Shape, "Circle",
          {
            fill: "transparent",  // not seen, by default; set to a translucent gray by showSmallPorts, defined below
            stroke: null,
            desiredSize: new go.Size(4, 4),
            alignment: spot,  // align the port on the main Shape
            alignmentFocus: spot,  // just inside the Shape
            portId: name,  // declare this object to be a "port"
            fromSpot: spot, toSpot: spot,  // declare where links may connect at this port
            fromLinkable: output, toLinkable: input,  // declare whether the user may draw links to/from here
            cursor: "pointer",  // show a different cursor to indicate potential link point
            // mouseEnter: function(e, port) {  // the PORT argument will be this Shape
            //   port.fill = "rgba(255,0,255,0.5)";
            // },
            // mouseLeave: function(e, port) {
            //   port.fill = "transparent";
            // }
          });
      }

      var nodeSelectionAdornmentTemplate =
        $(go.Adornment, "Auto",
          $(go.Shape, { fill: null, stroke: "deepskyblue", strokeWidth: 1.5, strokeDashArray: [4, 2] }),
          $(go.Placeholder)
        );

      var nodeResizeAdornmentTemplate =
        $(go.Adornment, "Spot",
          { locationSpot: go.Spot.Right },
          $(go.Placeholder),
          $(go.Shape, { alignment: go.Spot.TopLeft, cursor: "nw-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
          $(go.Shape, { alignment: go.Spot.Top, cursor: "n-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
          $(go.Shape, { alignment: go.Spot.TopRight, cursor: "ne-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),

          $(go.Shape, { alignment: go.Spot.Left, cursor: "w-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
          $(go.Shape, { alignment: go.Spot.Right, cursor: "e-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),

          $(go.Shape, { alignment: go.Spot.BottomLeft, cursor: "se-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
          $(go.Shape, { alignment: go.Spot.Bottom, cursor: "s-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" }),
          $(go.Shape, { alignment: go.Spot.BottomRight, cursor: "sw-resize", desiredSize: new go.Size(6, 6), fill: "lightblue", stroke: "deepskyblue" })
        );

      var nodeRotateAdornmentTemplate =
        $(go.Adornment,
          { locationSpot: go.Spot.Center, locationObjectName: "CIRCLE" },
          $(go.Shape, "Diamond", { name: "CIRCLE", cursor: "pointer", desiredSize: new go.Size(8, 8), fill: "Yellow", stroke: "deepskyblue" }),
          $(go.Shape, { geometryString: "M3.5 7 L3.5 30", isGeometryPositioned: true, stroke: "deepskyblue", strokeWidth: 1.5, strokeDashArray: [4, 2] })
        );

      myDiagram.nodeTemplate =
        $(go.Node, "Spot",
          { locationSpot: go.Spot.Center },
          new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
          { selectable: true, selectionAdornmentTemplate: nodeSelectionAdornmentTemplate },
          { resizable: true, resizeObjectName: "PANEL", resizeAdornmentTemplate: nodeResizeAdornmentTemplate },
          { rotatable: true, rotateAdornmentTemplate: nodeRotateAdornmentTemplate },
          new go.Binding("angle").makeTwoWay(),
          // the main object is a Panel that surrounds a TextBlock with a Shape
          $(go.Panel, "Auto",
            { name: "PANEL" },
            new go.Binding("desiredSize", "size", go.Size.parse).makeTwoWay(go.Size.stringify),
            $(go.Shape, "Rectangle",  // default figure
              {
                portId: "", // the default port: if no spot on link data, use closest side
                fromLinkable: true, toLinkable: true, cursor: "pointer",
                fill: "white",  // default color
                strokeWidth: 2
              },
              new go.Binding("figure"),
              new go.Binding("fill")),
            $(go.TextBlock,
              {
                font: "bold 8pt Helvetica, Times New Roman, sans-serif",
                margin: 8,
                maxSize: new go.Size(160, NaN),
                wrap: go.TextBlock.WrapFit,
                editable: true
              },
              new go.Binding("text").makeTwoWay())
          ),
          // four small named ports, one on each side:
          makePort("T", go.Spot.Top, false, true),
          makePort("L", go.Spot.Left, true, true),
          makePort("R", go.Spot.Right, true, true),
          makePort("B", go.Spot.Bottom, true, false),
          { // handle mouse enter/leave events to show/hide the ports
            mouseEnter: function(e, node) { showSmallPorts(node, true); },
            mouseLeave: function(e, node) { showSmallPorts(node, false); }
          }
        );

      function showSmallPorts(node, show) {
        node.ports.each(function(port) {
          if (port.portId !== "") {  // don't change the default port, which is the big shape
            port.fill = show ? "rgba(0,0,0,.3)" : null;
          }
        });
      }

      var linkSelectionAdornmentTemplate =
        $(go.Adornment, "Link",
          $(go.Shape,
            // isPanelMain declares that this Shape shares the Link.geometry
            { isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0 })  // use selection object's strokeWidth
        );

      myDiagram.linkTemplate =
        $(go.Link,  // the whole link panel
          { selectable: true, selectionAdornmentTemplate: linkSelectionAdornmentTemplate },
          { relinkableFrom: true, relinkableTo: true, reshapable: true },
          {
            routing: go.Link.AvoidsNodes,
            curve: go.Link.JumpOver,
            corner: 5,
            toShortLength: 4
          },
          new go.Binding("points").makeTwoWay(),
          $(go.Shape,  // the link path shape
            { isPanelMain: true, strokeWidth: 2 }),
          $(go.Shape,  // the arrowhead
            { toArrow: "Standard", stroke: null }),
          $(go.Panel, "Auto",
            new go.Binding("visible", "isSelected").ofObject(),
            $(go.Shape, "RoundedRectangle",  // the link shape
              { fill: "#F8F8F8", stroke: null }),
            $(go.TextBlock,
              {
                textAlign: "center",
                font: "10pt helvetica, arial, sans-serif",
                stroke: "#919191",
                margin: 2,
                minSize: new go.Size(10, NaN),
                editable: true
              },
              new go.Binding("text").makeTwoWay())
          )
        );

     // load();  // load an initial diagram from some JSON text

      // initialize the Palette that is on the left side of the page
      myPalette =
        $(go.Palette, "myPaletteDiv",  // must name or refer to the DIV HTML element
          {
            maxSelectionCount: 1,
            nodeTemplateMap: myDiagram.nodeTemplateMap,  // share the templates used by myDiagram
            linkTemplate: // simplify the link template, just in this Palette
              $(go.Link,
                { // because the GridLayout.alignment is Location and the nodes have locationSpot == Spot.Center,
                  // to line up the Link in the same manner we have to pretend the Link has the same location spot
                  locationSpot: go.Spot.Center,
                  selectionAdornmentTemplate:
                    $(go.Adornment, "Link",
                      { locationSpot: go.Spot.Center },
                      $(go.Shape,
                        { isPanelMain: true, fill: null, stroke: "deepskyblue", strokeWidth: 0 }),
                      $(go.Shape,  // the arrowhead
                        { toArrow: "Standard", stroke: null })
                    )
                },
                {
                  routing: go.Link.AvoidsNodes,
                  curve: go.Link.JumpOver,
                  corner: 5,
                  toShortLength: 4
                },
                new go.Binding("points"),
                $(go.Shape,  // the link path shape
                  { isPanelMain: true, strokeWidth: 2 }),
                $(go.Shape,  // the arrowhead
                  { toArrow: "Standard", stroke: null })
              ),
            model: new go.GraphLinksModel([  // specify the contents of the Palette
            { text: "Text", figure: "Circle", fill: "transparent"},
              { text: "Text",figure : "Rectangle",fill : "transparent" },              
              { text: "Text", figure: "Diamond",fill : "transparent" }, 
              { text: "Text", figure: "Ellipse",fill : "transparent" },
              { text: "Text", figure: "Square" ,fill : "transparent" },
              { text: "Text", figure: "TriangleUp",fill : "transparent" },
              { text: "Text", figure: "RoundedRectangle",fill : "transparent" },
              { text: "TXT", figure: "MinusLine",fill : "transparent" },
              { text: "TXT", figure: "Hexagon",fill : "transparent" },
              { text: "TXT", figure: "Pentagon",fill : "transparent" },
              
            ], [
                // the Palette also has a disconnected Link, which the user can drag-and-drop
                { points: new go.List(/*go.Point*/).addAll([new go.Point(0, 0), new go.Point(30, 0), new go.Point(30, 40), new go.Point(60, 40)]) },
                { points: new go.List(/*go.Point*/).addAll([new go.Point(-30, 30), new go.Point(30, 30)]) }
              ])
          });
    
    // Show the diagram's model in JSON format that the user may edit
    function save() {
      saveDiagramProperties();  // do this first, before writing to JSON
      //document.getElementById("mySavedModel").value = myDiagram.model.toJson();
      document.getElementById("data").value=myDiagram.model.toJson();     

      myDiagram.isModified = false;
    }
    //function load() {
      //if(aa == ""||aa == null){
        //myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
     // }
     // else{
        //myDiagram.model = go.Model.fromJson(document.getElementById("aa").value);
     // }
      //myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
      //loadDiagramProperties();  // do this after the Model.modelData has been brought into memory
   // }

    function saveDiagramProperties() {
      myDiagram.model.modelData.position = go.Point.stringify(myDiagram.position);
    }
    //function loadDiagramProperties(e) {
      // set Diagram.initialPosition, not Diagram.position, to handle initialization side-effects
     //var pos = myDiagram.model.modelData.position;
     // if (pos) myDiagram.initialPosition = go.Point.parse(pos);
   // }
    jQuery(function() {
        // $("#paletteDraggable").draggable({ handle: "#paletteDraggableHandle" }).resizable({
        //   // After resizing, perform another layout to fit everything in the palette's viewport
        //   stop: function() { myPalette.layoutDiagram(true); }
        // });

        jQuery("#infoDraggable").draggable({ handle: "#infoDraggableHandle" });


        var inspector = new Inspector('myInfo', myDiagram,
          {
            properties: {
              // key would be automatically added for nodes, but we want to declare it read-only also:
              "key": { readOnly: true, show: Inspector.showIfPresent },
              // fill and stroke would be automatically added for nodes, but we want to declare it a color also:
              "fill": { show: Inspector.showIfPresent, type: 'color' },
              "stroke": { show: Inspector.showIfPresent, type: 'color' }
            }
          });
      });
</script>      
</body>
</html>